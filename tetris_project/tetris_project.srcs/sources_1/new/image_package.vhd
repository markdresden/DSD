library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
package IMAGE_PACKAGE is
 type DIGIT_TYPE is array(NATURAL range <>, NATURAL range <>) of
BOOLEAN;

 constant DIGIT_0 : DIGIT_TYPE :=
 (
 (TRUE , TRUE , TRUE , TRUE ),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , TRUE , TRUE , TRUE )
 );

 constant DIGIT_1 : DIGIT_TYPE :=
 (
 (FALSE, FALSE, FALSE, TRUE ),
 (FALSE, FALSE, FALSE, TRUE ),
 (FALSE, FALSE, FALSE, TRUE ),
 (FALSE, FALSE, FALSE, TRUE ),
 (FALSE, FALSE, FALSE, TRUE ),
 (FALSE, FALSE, FALSE, TRUE ),
 (FALSE, FALSE, FALSE, TRUE )
 );

 constant DIGIT_2 : DIGIT_TYPE :=
 (
 (TRUE , TRUE , TRUE , TRUE ),
 (FALSE, FALSE, FALSE, TRUE ),
 (FALSE, FALSE, FALSE, TRUE ),
 (TRUE , TRUE , TRUE , TRUE ),
 (TRUE , FALSE, FALSE, FALSE),
 (TRUE , FALSE, FALSE, FALSE),
 (TRUE , TRUE , TRUE , TRUE )
 );

 constant DIGIT_3 : DIGIT_TYPE :=
 (
 (TRUE , TRUE , TRUE , TRUE ),
 (FALSE, FALSE, FALSE, TRUE ),
 (FALSE, FALSE, FALSE, TRUE ),
 (TRUE , TRUE , TRUE , TRUE ),
 (FALSE, FALSE, FALSE, TRUE ),
 (FALSE, FALSE, FALSE, TRUE ),
 (TRUE , TRUE , TRUE , TRUE )
 );

 constant DIGIT_4 : DIGIT_TYPE :=
 (
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , TRUE , TRUE , TRUE ),
 (FALSE, FALSE, FALSE, TRUE ),
 (FALSE, FALSE, FALSE, TRUE ),
 (FALSE, FALSE, FALSE, TRUE )
 );

 constant DIGIT_5 : DIGIT_TYPE :=
 (
 (TRUE , TRUE , TRUE , TRUE ),
 (TRUE , FALSE, FALSE, FALSE),
 (TRUE , FALSE, FALSE, FALSE),
 (TRUE , TRUE , TRUE , TRUE ),
 (FALSE, FALSE, FALSE, TRUE ),
 (FALSE, FALSE, FALSE, TRUE ),
 (TRUE , TRUE , TRUE , TRUE )
 );

 constant DIGIT_6 : DIGIT_TYPE :=
 (
 (TRUE , FALSE, FALSE, FALSE),
 (TRUE , FALSE, FALSE, FALSE),
 (TRUE , FALSE, FALSE, FALSE),
 (TRUE , TRUE , TRUE , TRUE ),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , TRUE , TRUE , TRUE )
 );

 constant DIGIT_7 : DIGIT_TYPE :=
 (
 (TRUE , TRUE , TRUE , TRUE ),
 (FALSE, FALSE, FALSE, TRUE ),
 (FALSE, FALSE, FALSE, TRUE ),
 (FALSE, FALSE, FALSE, TRUE ),
 (FALSE, FALSE, FALSE, TRUE ),
 (FALSE, FALSE, FALSE, TRUE ),
 (FALSE, FALSE, FALSE, TRUE )
 );

 constant DIGIT_8 : DIGIT_TYPE :=
 (
 (TRUE , TRUE , TRUE , TRUE),
 (TRUE , FALSE, FALSE, TRUE),
 (TRUE , FALSE, FALSE, TRUE),
 (TRUE , TRUE , TRUE , TRUE),
 (TRUE , FALSE, FALSE, TRUE),
 (TRUE , FALSE, FALSE, TRUE),
 (TRUE , TRUE , TRUE , TRUE)
 );

 constant DIGIT_9 : DIGIT_TYPE :=
 (
 (TRUE , TRUE , TRUE , TRUE),
 (TRUE , FALSE, FALSE, TRUE),
 (TRUE , FALSE, FALSE, TRUE),
 (TRUE , TRUE , TRUE , TRUE),
 (FALSE, FALSE, FALSE, TRUE),
 (FALSE, FALSE, FALSE, TRUE),
 (FALSE, FALSE, FALSE, TRUE)
 );

 type DIGIT_ARRAY_TYPE is array(NATURAL range <>) of DIGIT_TYPE;

 constant DIGIT_ARRAY : DIGIT_ARRAY_TYPE :=
 (DIGIT_0, DIGIT_1, DIGIT_2, DIGIT_3, DIGIT_4, DIGIT_5, DIGIT_6,
DIGIT_7, DIGIT_8, DIGIT_9);

 function digit_of_integer (number : INTEGER; n : INTEGER) return
INTEGER;

 type CHAR_TYPE is array(NATURAL range <>, NATURAL range <>) of
BOOLEAN;
 constant CHAR_A : CHAR_TYPE :=
 (
 (FALSE, TRUE , TRUE , FALSE),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , TRUE , TRUE , TRUE ),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , FALSE, FALSE, TRUE )
 );
 
  constant CHAR_B : CHAR_TYPE :=
 (
 (TRUE, TRUE , TRUE , FALSE),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , TRUE , TRUE , FALSE ),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , TRUE, TRUE, FALSE )
 );
 
 constant CHAR_C : CHAR_TYPE :=
 (
 (FALSE , TRUE , TRUE , FALSE),
 (TRUE , FALSE , FALSE , TRUE ),
 (TRUE , FALSE, FALSE, FALSE),
 (TRUE , FALSE, FALSE, FALSE),
 (TRUE , FALSE, FALSE, FALSE),
 (TRUE , FALSE , FALSE , TRUE ),
 (FALSE , TRUE , TRUE , FALSE)
 );
 
 constant CHAR_D : CHAR_TYPE :=
 (
 (TRUE , TRUE , TRUE , FALSE),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , TRUE , TRUE , FALSE)
 );
 
 constant CHAR_E : CHAR_TYPE :=
 (
 (TRUE , TRUE , TRUE , TRUE ),
 (TRUE , FALSE, FALSE, FALSE),
 (TRUE , FALSE, FALSE, FALSE),
 (TRUE , TRUE , TRUE , TRUE ),
 (TRUE , FALSE, FALSE, FALSE),
 (TRUE , FALSE, FALSE, FALSE),
 (TRUE , TRUE , TRUE , TRUE )
 );
 
 constant CHAR_F : CHAR_TYPE :=
 (
 (TRUE , TRUE , TRUE , TRUE ),
 (TRUE , FALSE, FALSE, FALSE),
 (TRUE , FALSE, FALSE, FALSE),
 (TRUE , TRUE , TRUE , TRUE ),
 (TRUE , FALSE, FALSE, FALSE),
 (TRUE , FALSE, FALSE, FALSE),
 (TRUE , FALSE , FALSE , FALSE )
 );
 
 constant CHAR_G : CHAR_TYPE :=
 (
 (FALSE, TRUE , TRUE , TRUE ),
 (TRUE , FALSE, FALSE, FALSE),
 (TRUE , FALSE, FALSE, FALSE),
 (TRUE , FALSE, TRUE , TRUE ),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , FALSE, FALSE, TRUE ),
 (FALSE, TRUE , TRUE , FALSE)
 );
 
 constant CHAR_H : CHAR_TYPE :=
 (
 (TRUE, FALSE , FALSE , TRUE),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , TRUE , TRUE , TRUE ),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , FALSE, FALSE, TRUE )
 );
 
 constant CHAR_I : CHAR_TYPE :=
 (
 (FALSE  , TRUE , TRUE , TRUE ),
 (FALSE  , FALSE , TRUE , FALSE ),
 (FALSE , FALSE , TRUE , FALSE),
 (FALSE , FALSE , TRUE , FALSE),
 (FALSE , FALSE , TRUE , FALSE),
 (FALSE  , FALSE , TRUE , FALSE ),
 (FALSE   , TRUE , TRUE , TRUE )
 );
 
 constant CHAR_J : CHAR_TYPE :=
 (
 (FALSE, FALSE , FALSE , TRUE),
 (FALSE , FALSE, FALSE, TRUE),
 (FALSE , FALSE, FALSE, TRUE),
 (TRUE , FALSE , FALSE , TRUE),
 (TRUE , FALSE, FALSE, TRUE),
 (TRUE , FALSE, FALSE, TRUE),
 (FALSE , TRUE, TRUE, TRUE)
 );
 
 constant CHAR_K : CHAR_TYPE :=
 (
 (TRUE, FALSE , FALSE , TRUE),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , FALSE, TRUE, FALSE ),
 (TRUE , TRUE , FALSE , FALSE ),
 (TRUE , FALSE, TRUE, FALSE ),
 (TRUE , FALSE, FALSE, TRUE ),
 (TRUE , TRUE, TRUE, TRUE )
 );
 
 constant CHAR_L : CHAR_TYPE :=
 (
 (TRUE  , FALSE, FALSE, FALSE),
 (TRUE  , FALSE, FALSE, FALSE),
 (TRUE  , FALSE, FALSE, FALSE),
 (TRUE  , FALSE, FALSE, FALSE),
 (TRUE  , FALSE, FALSE, FALSE),
 (TRUE  , FALSE, FALSE, FALSE),
 (TRUE   , TRUE , TRUE , TRUE )
 );
 
 constant CHAR_M : CHAR_TYPE :=
 (
 (TRUE  , FALSE, FALSE, TRUE),
 (TRUE  , TRUE, TRUE, TRUE),
 (TRUE  , FALSE, FALSE, TRUE),
 (TRUE  , FALSE, FALSE, TRUE),
 (TRUE  , FALSE, FALSE, TRUE),
 (TRUE  , FALSE, FALSE, TRUE),
 (TRUE   , FALSE, FALSE, TRUE)
 );
 
 constant CHAR_N : CHAR_TYPE :=
 (
 (TRUE  , FALSE, FALSE, TRUE),
 (TRUE  , TRUE, FALSE, TRUE),
 (TRUE  , TRUE, FALSE, TRUE),
 (TRUE  , FALSE, TRUE, TRUE),
 (TRUE  , FALSE, TRUE, TRUE),
 (TRUE  , FALSE, FALSE, TRUE),
 (TRUE   , FALSE, FALSE, TRUE)
 );
 
 constant CHAR_O : CHAR_TYPE :=
 (
 (FALSE, TRUE, TRUE, FALSE),
 (TRUE , FALSE, FALSE, TRUE),
 (TRUE , FALSE, FALSE, TRUE),
 (TRUE , FALSE, FALSE, TRUE),
 (TRUE , FALSE, FALSE, TRUE),
 (TRUE , FALSE, FALSE, TRUE),
 (FALSE, TRUE, TRUE, FALSE)
 );
 
 constant CHAR_P : CHAR_TYPE :=
 (
 (FALSE, TRUE, TRUE, FALSE),
 (TRUE , FALSE, FALSE, TRUE),
 (TRUE , FALSE, FALSE, TRUE),
 (TRUE , TRUE, TRUE, TRUE),
 (TRUE , FALSE, FALSE, FALSE),
 (TRUE , FALSE, FALSE, FALSE),
 (TRUE, FALSE, FALSE, FALSE)
 );
 
 constant CHAR_Q : CHAR_TYPE :=
 (
 (FALSE, TRUE, TRUE, FALSE),
 (TRUE, FALSE, FALSE, TRUE),
 (TRUE, FALSE, FALSE, TRUE),
 (TRUE, FALSE, FALSE, TRUE),
 (TRUE, FALSE, FALSE, TRUE),
 (TRUE, FALSE, TRUE, FALSE),
 (FALSE, TRUE, FALSE, TRUE)
 );
 
 constant CHAR_R : CHAR_TYPE :=
 (
 (TRUE, TRUE, TRUE, FALSE),
 (TRUE , FALSE, FALSE, TRUE),
 (TRUE , FALSE, FALSE, TRUE),
 (TRUE , TRUE, TRUE, TRUE),
 (TRUE , FALSE, TRUE, FALSE),
 (TRUE , FALSE, FALSE, TRUE),
 (TRUE, FALSE, FALSE, TRUE)
 );
 
 constant CHAR_S : CHAR_TYPE :=
 (
 (FALSE, TRUE, TRUE, TRUE),
 (TRUE, FALSE, FALSE, FALSE),
 (TRUE, FALSE, FALSE, FALSE),
 (TRUE, TRUE, TRUE, TRUE),
 (FALSE, FALSE, FALSE, TRUE),
 (FALSE, FALSE, FALSE, TRUE),
 (TRUE, TRUE, TRUE, FALSE)
 );
 
 constant CHAR_T : CHAR_TYPE :=
 (
 (TRUE  , TRUE , TRUE , TRUE ),
 (TRUE  , TRUE , TRUE , TRUE ),
 (FALSE , TRUE , TRUE , FALSE),
 (FALSE , TRUE , TRUE , FALSE),
 (FALSE , TRUE , TRUE , FALSE),
 (FALSE , TRUE , TRUE , FALSE),
 (FALSE  , TRUE , TRUE , FALSE)
 );
 
 constant CHAR_U : CHAR_TYPE :=
 (
 (TRUE, FALSE, FALSE, TRUE),
 (TRUE, FALSE, FALSE, TRUE),
 (TRUE, FALSE, FALSE, TRUE),
 (TRUE, FALSE, FALSE, TRUE),
 (TRUE, FALSE, FALSE, TRUE),
 (TRUE, FALSE, FALSE, TRUE),
 (FALSE, TRUE, TRUE, FALSE)
 );
 
 constant CHAR_V : CHAR_TYPE :=
 (
 (TRUE, FALSE, FALSE, TRUE),
 (TRUE, FALSE, FALSE, TRUE),
 (TRUE, FALSE, FALSE, TRUE),
 (TRUE, FALSE, FALSE, TRUE),
 (TRUE, FALSE, FALSE, TRUE),
 (FALSE, TRUE, TRUE, FALSE),
 (FALSE, TRUE, TRUE, FALSE)
 );
 
 constant CHAR_W : CHAR_TYPE :=
 (
 (TRUE, FALSE, FALSE, TRUE),
 (TRUE, FALSE, FALSE, TRUE),
 (TRUE, FALSE, FALSE, TRUE),
 (TRUE, FALSE, FALSE, TRUE),
 (TRUE, FALSE, TRUE, TRUE),
 (FALSE, TRUE, FALSE, TRUE),
 (FALSE, FALSE, FALSE, TRUE)
 );
 
 constant CHAR_X : CHAR_TYPE :=
 (
 (TRUE  , FALSE, FALSE, TRUE),
 (TRUE  , FALSE, FALSE, TRUE),
 (TRUE  , FALSE, FALSE, TRUE),
 (FALSE , TRUE, TRUE, FALSE),
 (TRUE , FALSE, FALSE, TRUE),
 (TRUE  , FALSE, FALSE, TRUE),
 (TRUE   , FALSE, FALSE, TRUE)
 );
 
 constant CHAR_Y : CHAR_TYPE :=
 (
 (TRUE, FALSE, FALSE, TRUE),
 (TRUE, FALSE, FALSE, TRUE),
 (TRUE, FALSE, FALSE, TRUE),
 (TRUE, TRUE, TRUE, TRUE),
 (FALSE, TRUE, TRUE, FALSE),
 (FALSE, TRUE, TRUE, FALSE),
 (FALSE, TRUE, TRUE, FALSE)
 );
 
 constant CHAR_Z : CHAR_TYPE :=
 (
 (TRUE, TRUE, TRUE, TRUE),
 (FALSE, FALSE, TRUE, TRUE),
 (FALSE, TRUE, TRUE, FALSE),
 (FALSE, TRUE, TRUE, FALSE),
 (FALSE, TRUE, TRUE, FALSE),
 (TRUE, FALSE, FALSE, FALSE),
 (TRUE, TRUE, TRUE, TRUE)
 );
 
 constant SPACE : CHAR_TYPE :=
 (
 (FALSE, FALSE, FALSE, FALSE),
 (FALSE, FALSE, FALSE, FALSE),
 (FALSE, FALSE, FALSE, FALSE),
 (FALSE, FALSE, FALSE, FALSE),
 (FALSE, FALSE, FALSE, FALSE),
 (FALSE, FALSE, FALSE, FALSE),
 (FALSE, FALSE, FALSE, FALSE)
 );
 
 type CHAR_ARRAY_TYPE is array(NATURAL range <>) of CHAR_TYPE;
 constant CHAR_ARRAY : CHAR_ARRAY_TYPE :=
 (CHAR_T, CHAR_E, CHAR_T, CHAR_R, CHAR_I, CHAR_S, SPACE, CHAR_V, CHAR_H, CHAR_D, CHAR_L);
 
 constant TETRIS_ARRAY : CHAR_ARRAY_TYPE :=
 (CHAR_T, CHAR_E, CHAR_T, CHAR_R, CHAR_I, CHAR_S);
 
 constant STAGE_ARRAY : CHAR_ARRAY_TYPE :=
 (CHAR_S, CHAR_T, CHAR_A, CHAR_G, CHAR_E);
 
 constant HOLD_ARRAY : CHAR_ARRAY_TYPE :=
 (CHAR_H, CHAR_O, CHAR_L, CHAR_D);
 
 constant LINES_ARRAY : CHAR_ARRAY_TYPE :=
 (CHAR_L, CHAR_I, CHAR_N, CHAR_E, CHAR_S);
 
 constant SCORE_ARRAY : CHAR_ARRAY_TYPE :=
 (CHAR_S, CHAR_C, CHAR_O, CHAR_R, CHAR_E);
 
 constant NEXT_ARRAY : CHAR_ARRAY_TYPE :=
 (CHAR_N, CHAR_E, CHAR_X, CHAR_T);

end package;
package body IMAGE_PACKAGE is
 function digit_of_integer (number : INTEGER; n : INTEGER) return
INTEGER is

 variable digit : INTEGER := 0;
 variable power10 : INTEGER := 1;

 begin

 for i in 1 to n loop
 power10 := power10 * 10;
 end loop;

 digit := number * 10 / power10;
 digit := digit mod 10;

 return digit;

 end function;
 end package body;